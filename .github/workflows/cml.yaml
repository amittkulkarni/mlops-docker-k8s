name: CML CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up CML
      uses: iterative/setup-cml@v1
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Train model
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python model/train_model.py
        
    - name: Generate CML report
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "# Model Training Results" > report.md
        echo "" >> report.md
        echo "## Metrics" >> report.md
        cat classification_report.txt >> report.md
        echo "" >> report.md
        
        if [ -f metrics.json ]; then
          echo "## Model Performance" >> report.md
          echo '```
          cat metrics.json >> report.md
          echo '```' >> report.md
        fi
        
        cml comment create report.md
        
    - name: Build Docker image
      run: |
        docker build -t iris-api:${{ github.sha }} .
        docker tag iris-api:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/iris-api:${{ github.sha }}
        docker tag iris-api:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/iris-api:latest
        
    - name: Push Docker image
      run: |
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/iris-api:${{ github.sha }}
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/iris-api:latest
        
    - name: Deploy to GKE
      if: github.ref == 'refs/heads/main'
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
          --zone ${{ secrets.GKE_ZONE }}
          
        # Update deployment with new image
        sed -i "s/PROJECT_ID/${{ secrets.GCP_PROJECT_ID }}/g" k8s/deployment.yaml
        sed -i "s/:latest/:${{ github.sha }}/g" k8s/deployment.yaml
        
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/iris-api-deployment --timeout=300s
        
        # Get service URL
        echo "Deployment completed successfully!"
        kubectl get services iris-api-service
